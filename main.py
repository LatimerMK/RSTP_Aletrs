import cv2
import numpy as np
import requests
import logging
import time
from datetime import datetime
import os
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# ==== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ====
RTSP_URL = os.getenv("RTSP_URL")
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_BOT_TOKEN")

# –û—Å–Ω–æ–≤–Ω–∞ –ø–∞–ø–∫–∞ —Ä–µ—Å—É—Ä—Å—ñ–≤
RESOURCES_FOLDER = "RESOURCES"
if not os.path.exists(RESOURCES_FOLDER):
    os.makedirs(RESOURCES_FOLDER)

# ==== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è  ====
RESTART_INTERVAL = 60 * 60  # –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
RETRY_DELAY = 5              # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–∏–º —Å—Ç–∞—Ä—Ç–æ–º –ø—ñ—Å–ª—è –∑–±–æ—é (—Å–µ–∫)
# –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å —Ä—É—Ö—É (—á–∏–º –º–µ–Ω—à–µ —á–∏—Å–ª–æ ‚Äì —Ç–∏–º —á—É—Ç–ª–∏–≤—ñ—à–µ)
MOTION_THRESHOLD = 2
MIN_BRIGHTNESS = 30       # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å–µ—Ä–µ–¥–Ω—è —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å –∫–∞–¥—Ä—É
MIN_CONTOUR_AREA = 50     # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞ –∫–æ–Ω—Ç—É—Ä—É –¥–ª—è –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ä—É—Ö—É
# –†–æ–∑–º—ñ—Ä –¥–ª—è 16:9 (FullHD)
TARGET_SIZE = (1920, 1080)
# ROI –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (x, y, w, h) - –ø—ñ–¥ —Å–µ–±–µ
ROI = (654, 536, 266, 172)

roi_coords = []

# ==== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ ====
now = datetime.now()
month_log_folder = os.path.join(RESOURCES_FOLDER, now.strftime("%Y-%m"))  # –ø–∞–ø–∫–∞ –º—ñ—Å—è—Ü—è –¥–ª—è –ª–æ–≥—ñ–≤
if not os.path.exists(month_log_folder):
    os.makedirs(month_log_folder)

today_str = now.strftime("%Y-%m-%d")
LOG_FILE = os.path.join(month_log_folder, f"{today_str}.log")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%H:%M:%S',
    handlers=[
        logging.FileHandler(LOG_FILE, mode='a', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logging.info(f"‚úÖ –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ, —Ñ–∞–π–ª: {LOG_FILE}")



def select_roi(RTSP_URL):
    cap = cv2.VideoCapture(RTSP_URL)
    ret, frame = cap.read()
    cap.release()

    if not ret:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞–¥—Ä")
        return None

    clone = frame.copy()

    def mouse_callback(event, x, y, flags, param):
        if event == cv2.EVENT_LBUTTONDOWN:
            if len(param) < 2:
                param.append((x, y))

    cv2.namedWindow("Frame")
    cv2.setMouseCallback("Frame", mouse_callback, roi_coords)

    print("üñ± –õ–ö–ú ‚Äî —Ç–æ—á–∫–∞, Backspace ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏, Enter ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏, ESC ‚Äî —Å–∫–∞—Å—É–≤–∞—Ç–∏")

    while True:
        display = clone.copy()
        for pt in roi_coords:
            cv2.circle(display, pt, 5, (0, 0, 255), -1)

        if len(roi_coords) == 2:
            x1, y1 = roi_coords[0]
            x2, y2 = roi_coords[1]
            cv2.rectangle(display, (x1, y1), (x2, y2), (0, 255, 0), 2)

        cv2.imshow("Frame", display)
        key = cv2.waitKey(1) & 0xFF

        if key == 13:  # Enter
            if len(roi_coords) == 2:
                break
            else:
                print("‚ö†Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –¥–≤—ñ —Ç–æ—á–∫–∏ –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º!")
        elif key == 8:  # Backspace
            if roi_coords:
                roi_coords.pop()
        elif key == 27:  # ESC
            roi_coords.clear()
            break

    cv2.destroyAllWindows()

    if len(roi_coords) == 2:
        (x1, y1), (x2, y2) = roi_coords
        x, y = min(x1, x2), min(y1, y2)
        w, h = abs(x2 - x1), abs(y2 - y1)
        print(f"‚úÖ ROI = ({x}, {y}, {w}, {h})")
        return (x, y, w, h)
    else:
        print("‚ùå ROI –Ω–µ –≤–∏–±—Ä–∞–Ω–æ")
        return None

def send_photo(photo_path):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ Telegram —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –ø–∞–ø–∫—É —Ä–µ—Å—É—Ä—Å–∏/–º—ñ—Å—è—Ü—å/–¥–µ–Ω—å"""
    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ
    url = f"https://api.telegram.org/bot{TOKEN}/sendPhoto"
    with open(photo_path, "rb") as f:
        files = {"photo": f}
        data = {"chat_id": CHAT_ID}
        requests.post(url, files=files, data=data)

    now = datetime.now()
    # –ü–∞–ø–∫–∞ –º—ñ—Å—è—Ü—è –¥–ª—è —Ñ–æ—Ç–æ
    month_folder = os.path.join(RESOURCES_FOLDER, now.strftime("%Y-%m") + "_photo")
    if not os.path.exists(month_folder):
        os.makedirs(month_folder)

    # –ü–∞–ø–∫–∞ –¥–Ω—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –º—ñ—Å—è—á–Ω–æ—ó
    day_folder = os.path.join(month_folder, now.strftime("%Y-%m-%d"))
    if not os.path.exists(day_folder):
        os.makedirs(day_folder)

    # –§–æ—Ä–º—É—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É –∑–∞ –¥–∞—Ç–æ—é —Ç–∞ —á–∞—Å–æ–º
    timestamp = now.strftime("%Y-%m-%d_%H-%M-%S")
    new_filename = f"{timestamp}.jpg"
    new_path = os.path.join(day_folder, new_filename)

    # –ü–µ—Ä–µ–º—ñ—â–∞—î–º–æ —Ñ–∞–π–ª
    os.rename(photo_path, new_path)
    logging.info(f"üì∏ –§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {new_path}")

def stretch_to_16_9(img, target_size=TARGET_SIZE, contrast=1.2, brightness=10, denoise_strength=2):
    """
    –ü–æ–∫—Ä–∞—â—É—î –∫–∞—Ä—Ç–∏–Ω–∫—É:
    1. –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –¥–æ 16:9
    2. –ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–∑–∫–æ—Å—Ç—ñ
    3. –ó–º–µ–Ω—à–µ–Ω–Ω—è —à—É–º—É
    4. –ö–æ—Ä–µ–∫—Ü—ñ—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É —Ç–∞ —è—Å–∫—Ä–∞–≤–æ—Å—Ç—ñ
    """
    # –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –∑ –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–æ—é —ñ–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—î—é
    stretched = cv2.resize(img, target_size, interpolation=cv2.INTER_LANCZOS4)

    # –ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–∑–∫–æ—Å—Ç—ñ
    kernel = np.array([[0, -1, 0],
                       [-1, 5, -1],
                       [0, -1, 0]])
    sharpened = cv2.filter2D(stretched, -1, kernel)
    # –ó–º–µ–Ω—à–µ–Ω–Ω—è —à—É–º—É
    denoised = cv2.fastNlMeansDenoisingColored(sharpened, None, denoise_strength, denoise_strength, 7, 21)

    # –ö–æ—Ä–µ–∫—Ü—ñ—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É —Ç–∞ —è—Å–∫—Ä–∞–≤–æ—Å—Ç—ñ
    enhanced = cv2.convertScaleAbs(denoised, alpha=contrast, beta=brightness)

    return enhanced


def main():
    global ROI
    global MOTION_THRESHOLD
    global MIN_BRIGHTNESS

    logging.info("üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ RTSP –ø–æ—Ç–æ–∫—É...")
    cap = cv2.VideoCapture(RTSP_URL)

    ret, prev_frame = cap.read()
    if not ret:
        logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—à–∏–π –∫–∞–¥—Ä –∑ RTSP")
        return
    logging.info("‚úÖ –ü–æ—Ç—ñ–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ, –ø–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –∫–∞–¥—Ä—ñ–≤")

    x, y, w, h = ROI
    prev_roi = cv2.cvtColor(prev_frame[y:y+h, x:x+w], cv2.COLOR_BGR2GRAY)

    last_alert_time = 0
    ALERT_INTERVAL = 30  # —Å–µ–∫—É–Ω–¥, –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
    is_dark = False  # –≥–ª–æ–±–∞–ª—å–Ω–∞ –∞–±–æ –∑–æ–≤–Ω—ñ—à–Ω—è –∑–º—ñ–Ω–Ω–∞ –ø–µ—Ä–µ–¥ —Ü–∏–∫–ª–æ–º

    while True:
        ret, frame = cap.read()
        if not ret:
            logging.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞–¥—Ä, –ø–æ–≤—Ç–æ—Ä —Å–ø—Ä–æ–±–∏...")
            time.sleep(1)
            continue

        roi = frame[y:y+h, x:x+w]
        gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
        avg_brightness = np.mean(gray)

        if avg_brightness < MIN_BRIGHTNESS:
            if not is_dark:  # –ª–æ–≥ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥—ñ –≤ —Ç–µ–º—Ä—è–≤—É
                logging.info("üåô –î—É–∂–µ —Ç–µ–º–Ω–æ, –¥—Ä—ñ–±–Ω—ñ —Ä—É—Ö–∏ —ñ–≥–Ω–æ—Ä—É—î–º–æ")
                is_dark = True
            prev_roi = gray
            continue
        else:
            if is_dark:  # –ª–æ–≥ –ø–µ—Ä–µ—Ö–æ–¥—É –∑ —Ç–µ–º—Ä—è–≤–∏ –≤ —Å–≤—ñ—Ç–ª–æ
                logging.info("üí° –ö–∞–¥—Ä –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –æ—Å–≤—ñ—Ç–ª–µ–Ω–∏–π, –æ–±—Ä–æ–±–∫–∞ —Ä—É—Ö—É")
                is_dark = False

        # –†—ñ–∑–Ω–∏—Ü—è –∫–∞–¥—Ä—ñ–≤
        diff = cv2.absdiff(prev_roi, gray)
        _, thresh = cv2.threshold(diff, 25, 255, cv2.THRESH_BINARY)

        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥—Ä—ñ–±–Ω—ñ –æ–±‚Äô—î–∫—Ç–∏
        contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        motion_area = sum(cv2.contourArea(c) for c in contours if cv2.contourArea(c) > MIN_CONTOUR_AREA)

        logging.debug(f"‚ÑπÔ∏è –†—ñ–≤–µ–Ω—å —Ä—É—Ö—É (—Å—É–º–∞ –ø–ª–æ—â): {motion_area}, —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å: {avg_brightness}")

        if motion_area > MOTION_THRESHOLD:
            now = time.time()
            if now - last_alert_time >= ALERT_INTERVAL:
                stretched = stretch_to_16_9(frame)
                filename = "alert.jpg"
                cv2.imwrite(filename, stretched, [int(cv2.IMWRITE_JPEG_QUALITY), 95])
                send_photo(filename)
                logging.info(f"‚ö†Ô∏è –†—É—Ö –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ! –§–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
                last_alert_time = now
            else:
                logging.info("‚ö†Ô∏è –†—É—Ö –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ, –∞–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ —Ä–∞–Ω–æ (—ñ–Ω—Ç–µ—Ä–≤–∞–ª)")

        prev_roi = gray

    cap.release()
    logging.info("üõë –ü–æ—Ç—ñ–∫ –∑–∞–∫—Ä–∏—Ç–æ")

if __name__ == "__main__":

    #ROI = select_roi(RTSP_URL)
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–µ—Ç–µ–∫—Ü—ñ—ó —Ä—É—Ö—É")

    while True:
        start_time = time.time()
        try:
            # –Ø–∫—â–æ —Ö–æ—á–µ—à –æ–±–∏—Ä–∞—Ç–∏ ROI —á–µ—Ä–µ–∑ GUI:
            # ROI = select_roi(RTSP_URL)
            main()  # –∑–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª
        except Exception as e:
            logging.error(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            logging.info(f"‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {RETRY_DELAY} —Å–µ–∫—É–Ω–¥...")
            time.sleep(RETRY_DELAY)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç
        elapsed = time.time() - start_time
        if elapsed < RESTART_INTERVAL:
            sleep_time = RESTART_INTERVAL - elapsed
            logging.info(f"‚è≥ –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ {int(sleep_time)} —Å–µ–∫—É–Ω–¥")
            time.sleep(sleep_time)
