#!/usr/bin/env python3
# main.py ‚Äî RTSP motion alert with centroid-center trigger, dynamic sensitivity, monthly logs and photo archive

import cv2
import numpy as np
import requests
import logging
import time
from datetime import datetime
import os
from dotenv import load_dotenv

load_dotenv()

# ==== ENV / CONFIG ====
RTSP_URL = os.getenv("RTSP_URL")
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# ==== Folders ====
RESOURCES_FOLDER = "RESOURCES"
os.makedirs(RESOURCES_FOLDER, exist_ok=True)

# ==== Runtime settings ====
RESTART_INTERVAL = 60 * 60      # –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏–π —Ä–µ—Å—Ç–∞—Ä—Ç (—Å–µ–∫)
RETRY_DELAY = 5                 # –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ (—Å–µ–∫)

# Motion params (tweak these)
MOTION_THRESHOLD = 500          # –±–∞–∑–æ–≤–∏–π –ø–æ—Ä—ñ–≥ (—Å—É–º–∞ –ø–ª–æ—â—ñ –∫–æ–Ω—Ç—É—Ä—ñ–≤)
MIN_BRIGHTNESS = 30             # –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å–µ—Ä–µ–¥–Ω—è —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å –∫–∞–¥—Ä—É (—è–∫—â–æ –Ω–∏–∂—á–µ ‚Äî –≤–≤–∞–∂–∞—î–º–æ —Ç–µ–º–Ω–æ)
MIN_CONTOUR_AREA = 50           # –º—ñ–Ω. –ø–ª–æ—â–∞ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç—É—Ä—É —â–æ–± –≤—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏ –π–æ–≥–æ
TARGET_SIZE = (2560, 1440)      # —Ä–æ–∑–º—ñ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ñ–æ—Ç–æ
ROI = (737, 534, 175, 146)      # (x, y, w, h) (654, 536, 266, 172)
MOTION_DELAY_FRAMES = 10         # –∫–∞–¥—Ä–∏, —è–∫—ñ –æ–±'—î–∫—Ç –º–∞—î –±—É—Ç–∏ –≤ —Ü–µ–Ω—Ç—Ä—ñ –ø–µ—Ä–µ–¥ —Ç—Ä—ñ–≥–µ—Ä–æ–º
ALERT_INTERVAL = 5.0            # –º—ñ–Ω. —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –∞–ª–µ—Ä—Ç–∞–º–∏ –¥–ª—è —Ç–æ–≥–æ —Å–∞–º–æ–≥–æ –æ–±'—î–∫—Ç–∞ (—Å–µ–∫)
TRIGGER_MEMORY_SECONDS = 8.0    # —Å–∫—ñ–ª—å–∫–∏ –ø–∞–º'—è—Ç–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∏–≥–µ—Ä–∏ (—â–æ–± —Ä–æ–∑—Ä—ñ–∑–Ω—è—Ç–∏ –∞–≤—Ç–æ)
MIN_DISTANCE_FOR_DIFFERENT = 100 # px - –º—ñ–Ω. –¥–∏—Å—Ç–∞–Ω—Ü—ñ—è —Ü–µ–Ω—Ç—Ä–æ—ó–¥–∞ —â–æ–± –≤–≤–∞–∂–∞—Ç–∏ –æ–±'—î–∫—Ç —ñ–Ω—à–∏–º
BRIGHTNESS_TRIGGER_DELTA = 40   # —è–∫—â–æ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å —Å—Ç—Ä–∏–±–Ω—É–ª–∞ –±—ñ–ª—å—à–µ –∑–∞ —Ü–µ –∑–Ω–∞—á–µ–Ω–Ω—è -> –º–∏—Ç—Ç—î–≤–∏–π —Ç—Ä–∏–≥–µ—Ä
DARK_DYNAMIC_FACTOR = 2.5       # –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –ø—ñ–¥–≤–∏—â—É–≤–∞—Ç–∏ –ø–æ—Ä—ñ–≥ —É —Ç–µ–º—Ä—è–≤—ñ (–µ–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)
JPEG_QUALITY = 75               # 95 / 85 / 75  - 1.2 / 0.5 / 0.3 mb

# ==== Logging (monthly folder, UTF-8) ====
now = datetime.now()
month_log_folder = os.path.join(RESOURCES_FOLDER, now.strftime("%Y-%m"))
os.makedirs(month_log_folder, exist_ok=True)
LOG_FILE = os.path.join(month_log_folder, f"{now.strftime('%Y-%m-%d')}.log")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%H:%M:%S',
    handlers=[
        logging.FileHandler(LOG_FILE, mode='a', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logging.info(f"‚úÖ –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ, —Ñ–∞–π–ª: {LOG_FILE}")

def select_roi(RTSP_URL):
    cap = cv2.VideoCapture(RTSP_URL)
    ret, frame = cap.read()
    cap.release()
    roi_coords = []
    if not ret:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞–¥—Ä")
        return None

    clone = frame.copy()

    def mouse_callback(event, x, y, flags, param):
        if event == cv2.EVENT_LBUTTONDOWN:
            if len(param) < 2:
                param.append((x, y))

    cv2.namedWindow("Frame")
    cv2.setMouseCallback("Frame", mouse_callback, roi_coords)

    print("üñ± –õ–ö–ú ‚Äî —Ç–æ—á–∫–∞, Backspace ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏, Enter ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏, ESC ‚Äî —Å–∫–∞—Å—É–≤–∞—Ç–∏")

    while True:
        display = clone.copy()
        for pt in roi_coords:
            cv2.circle(display, pt, 5, (0, 0, 255), -1)

        if len(roi_coords) == 2:
            x1, y1 = roi_coords[0]
            x2, y2 = roi_coords[1]
            cv2.rectangle(display, (x1, y1), (x2, y2), (0, 255, 0), 2)

        cv2.imshow("Frame", display)
        key = cv2.waitKey(1) & 0xFF

        if key == 13:  # Enter
            if len(roi_coords) == 2:
                break
            else:
                print("‚ö†Ô∏è –í–∏–±–µ—Ä—ñ—Ç—å –¥–≤—ñ —Ç–æ—á–∫–∏ –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º!")
        elif key == 8:  # Backspace
            if roi_coords:
                roi_coords.pop()
        elif key == 27:  # ESC
            roi_coords.clear()
            break

    cv2.destroyAllWindows()

    if len(roi_coords) == 2:
        (x1, y1), (x2, y2) = roi_coords
        x, y = min(x1, x2), min(y1, y2)
        w, h = abs(x2 - x1), abs(y2 - y1)
        print(f"‚úÖ ROI = ({x}, {y}, {w}, {h})")
        return (x, y, w, h)
    else:
        print("‚ùå ROI –Ω–µ –≤–∏–±—Ä–∞–Ω–æ")
        return None


def send_telegram(message):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": message}
    try:
        requests.post(url, data=payload)
        logging.info(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
    except Exception as e:
        logging.info(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ: {e}")

# --- –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª ---
last_sent_minute = -1  # —â–æ–± –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–ª–æ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –æ–¥–Ω—É —ñ —Ç—É –∂ —Ö–≤–∏–ª–∏–Ω—É

# ==== Helpers ====
def send_photo(photo_path):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ Telegram —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –ø–∞–ø–∫—É —Ä–µ—Å—É—Ä—Å–∏/–º—ñ—Å—è—Ü—å_photo/–¥–µ–Ω—å"""
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/sendPhoto"
        with open(photo_path, "rb") as f:
            files = {"photo": f}
            data = {"chat_id": CHAT_ID}
            resp = requests.post(url, files=files, data=data, timeout=15)
        if resp.status_code != 200:
            logging.warning(f"Telegram returned status {resp.status_code}: {resp.text}")
    except Exception as e:
        logging.exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–æ—Ç–æ —É Telegram: {e}")

    now = datetime.now()
    month_folder = os.path.join(RESOURCES_FOLDER, now.strftime("%Y-%m") + "_photo")
    os.makedirs(month_folder, exist_ok=True)
    day_folder = os.path.join(month_folder, now.strftime("%Y-%m-%d"))
    os.makedirs(day_folder, exist_ok=True)

    timestamp = now.strftime("%Y-%m-%d_%H-%M-%S")
    new_filename = f"{timestamp}.jpg"
    new_path = os.path.join(day_folder, new_filename)

    try:
        os.replace(photo_path, new_path)
    except Exception:
        os.rename(photo_path, new_path)
    logging.info(f"üì∏ –§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {new_path}")

def stretch_to_16_9(img, target_size=TARGET_SIZE):
    """–ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è 16:9"""
    return cv2.resize(img, target_size, interpolation=cv2.INTER_LANCZOS4)

# ==== Main detection logic ====
def main():
    global ROI
    global MOTION_THRESHOLD
    global MIN_BRIGHTNESS
    global JPEG_QUALITY

    logging.info("üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ RTSP –ø–æ—Ç–æ–∫—É...")
    cap = cv2.VideoCapture(RTSP_URL)

    ret, prev_frame = cap.read()
    if not ret:
        logging.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—à–∏–π –∫–∞–¥—Ä –∑ RTSP")
        return
    logging.info("‚úÖ –ü–æ—Ç—ñ–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ, –ø–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –∫–∞–¥—Ä—ñ–≤")

    x, y, w, h = ROI
    prev_roi = cv2.cvtColor(prev_frame[y:y+h, x:x+w], cv2.COLOR_BGR2GRAY)

    last_alert_time = 0
    is_dark = False
    trigger_memory = []
    # --- –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª ---
    last_sent_minute = -1  # —â–æ–± –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–ª–æ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –æ–¥–Ω—É —ñ —Ç—É –∂ —Ö–≤–∏–ª–∏–Ω—É
    recent_frames = []

    while True:
        ret, frame = cap.read()
        if not ret:
            error_get_frame_msg = "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞–¥—Ä, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫..."
            logging.warning(error_get_frame_msg)
            send_telegram(error_get_frame_msg)
            #continue
            return
        #---------------------------------------------------------
        now = datetime.now()
        minute = now.minute
        if minute % 10 == 0 and minute != last_sent_minute:
            check_online_msg = "–í—Å–µ –æ–∫–µ–π, —Ü–∏–∫–ª –ø—Ä–∞—Ü—é—î üëç"
            send_telegram(check_online_msg)
            logging.warning(check_online_msg)
            last_sent_minute = minute
        # ---------------------------------------------------------

        roi = frame[y:y+h, x:x+w]
        gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
        avg_brightness = np.mean(gray)

        # –î–∏–Ω–∞–º—ñ—á–Ω–∞ —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å –ø—Ä–∏ —Ç–µ–º—Ä—è–≤—ñ
        motion_threshold_dynamic = MOTION_THRESHOLD
        if avg_brightness < MIN_BRIGHTNESS:
            motion_threshold_dynamic *= DARK_DYNAMIC_FACTOR

        # –ú–∏—Ç—Ç—î–≤–∏–π —Ç—Ä–∏–≥–µ—Ä –ø—Ä–∏ —Å–ø–∞–ª–∞—Ö—É —è—Å–∫—Ä–∞–≤–æ—Å—Ç—ñ
        brightness_jump = np.mean(gray) - np.mean(prev_roi)
        if brightness_jump > BRIGHTNESS_TRIGGER_DELTA:
            motion_detected = True
        else:
            # –†—ñ–∑–Ω–∏—Ü—è –∫–∞–¥—Ä—ñ–≤
            diff = cv2.absdiff(prev_roi, gray)
            _, thresh = cv2.threshold(diff, 25, 255, cv2.THRESH_BINARY)
            contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            motion_area = sum(cv2.contourArea(c) for c in contours if cv2.contourArea(c) > MIN_CONTOUR_AREA)
            motion_detected = motion_area > motion_threshold_dynamic

            motion_detected = False
            centroids_in_frame = []

            for c in contours:
                if cv2.contourArea(c) < MIN_CONTOUR_AREA:
                    continue
                M = cv2.moments(c)
                if M["m00"] == 0:
                    continue
                cx = int(M["m10"] / M["m00"])
                cy = int(M["m01"] / M["m00"])
                centroids_in_frame.append((cx, cy))

                # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –∑–æ–Ω–∞ ROI
                if 0.25 * w < cx < 0.75 * w and 0.25 * h < cy < 0.75 * h:
                #if 0.25 * w < cx < 0.75 * w and 0.1 * h < cy < 0.9 * h:
                # —Ä—É—Ö –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ—ó –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ—ó —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—ó –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ—ó –∑–æ–Ω–∏
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Ç—Ä–∏–≥–µ—Ä—ñ–≤
                    now_time = time.time()
                    trigger_memory = [t for t in trigger_memory if now_time - t[1] < TRIGGER_MEMORY_SECONDS]
                    new_trigger = True
                    for mem_centroid, ts in trigger_memory:
                        dist = np.linalg.norm(np.array([cx, cy]) - np.array(mem_centroid))
                        if dist < MIN_DISTANCE_FOR_DIFFERENT:
                            new_trigger = False
                            break

                    if new_trigger:
                        motion_detected = True
                        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
                        if now_time - last_alert_time >= ALERT_INTERVAL:
                            stretched = stretch_to_16_9(frame)
                            filename = "alert.jpg"
                            cv2.imwrite(filename, stretched, [int(cv2.IMWRITE_JPEG_QUALITY), JPEG_QUALITY])
                            send_photo(filename)
                            last_alert_time = now_time
                            trigger_memory.append(((cx, cy), now_time))
                            logging.info(f"‚ö†Ô∏è –†—É—Ö –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ! –§–æ—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")

        prev_roi = gray

    cap.release()

    logging.info("üõë –ü–æ—Ç—ñ–∫ –∑–∞–∫—Ä–∏—Ç–æ")

# ==== Run wrapper with auto-restart ====
if __name__ == "__main__":
    #select_roi(RTSP_URL)
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–µ—Ç–µ–∫—Ü—ñ—ó —Ä—É—Ö—É")
    while True:
        start_time = time.time()
        try:
            main()
        except KeyboardInterrupt:
            logging.info("üîπ –û—Ç—Ä–∏–º–∞–Ω–æ SIGINT ‚Äî –≤–∏—Ö—ñ–¥")
            #break
        except Exception as e:
            logging.exception(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            logging.info(f"‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {RETRY_DELAY} —Å–µ–∫...")
            time.sleep(RETRY_DELAY)

    time.sleep(5)